<?php echo $this->runChild('includes.header'); ?>

<?php /* <link rel="stylesheet/less" type="text/css" href="<?php echo \htmlentities(RUTA_URL??'', ENT_QUOTES, 'UTF-8', false); ?>/public/less/styles.less" />Carga LESS desde archivo local */ ?>
<?php /* <link rel="stylesheet" type="text/css" href="<?php echo \htmlentities(RUTA_URL??'', ENT_QUOTES, 'UTF-8', false); ?>/public/css/styles.css" /> Carga css desde archivo local */ ?>

<?php /* start contenido */ ?>

<link rel="stylesheet" type="text/css" href="<?php echo \htmlentities(RUTA_URL??'', ENT_QUOTES, 'UTF-8', false); ?>/public/css/fullcalendar.css" />

<div class="container mt-5">
 <h1 class="text-center">Calendario de Eventos</h1>
 <div id="calendar"></div>
</div>

<script>
 //crear una variable que contenga la ruta de la url en js
 const RUTA_URL = '<?= RUTA_URL ?>';

 document.addEventListener("DOMContentLoaded", function() {
 const calendarEl = document.getElementById('calendar');
 const calendar = new FullCalendar.Calendar(calendarEl, {
 schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',
 locale: 'es',
 initialView: 'dayGridMonth',
 editable: true,
 events: `${RUTA_URL}/paginas/get_events`, //url para obtener eventos
 headerToolbar: {
 left: 'prev,next today',
 center: 'title',
 right: 'dayGridMonth,timeGridWeek'
 },
 views: {
 dayGridMonth: {
 buttonText: 'Mes'
 },
 timeGridWeek: {
 buttonText: 'Semana'
 }
 },
 editable: true, // Permitir editar eventos
 droppable: false, // No permitir dropear eventos
 eventDidMount: function(info) {
 // Mostrar tooltip con la descripción del evento
 const tooltip = new bootstrap.Tooltip(info.el, {
 title: info.event.extendedProps.description || 'Sin descripción',
 placement: 'top',
 trigger: 'hover',
 container: 'body'
 });
 },
 eventClick: function(info) {
 Swal.fire({
 icon: 'warning',
 title: 'Editar Evento',
 html: `
 <input type="text" id="title" class="swal2-input" value="${info.event.title}" placeholder="Título del Evento" required>
 <label for="start">Fecha de Inicio</label>
 <input type="date" id="start" class="swal2-input" value="${info.event.startStr}" required>
 <label for="end">Fecha de Fin</label>
 <input type="date" id="end" class="swal2-input" value="${info.event.endStr}">
 `,
 preConfirm: () => {
 const title = Swal.getPopup().querySelector('#title').value;
 const start = Swal.getPopup().querySelector('#start').value;
 const end = Swal.getPopup().querySelector('#end').value;
 if (!title || !start) {
 Swal.showValidationMessage(
 'Por favor, completa todos los campos');
 }
 return {
 title,
 start,
 end,
 id: info.event.id
 };
 },
 showCancelButton: true,
 cancelButtonText: 'Cancelar',
 confirmButtonText: 'Editar Evento',
 cancelButtonColor: '#6c757d',
 showDenyButton: true,
 denyButtonText: 'Eliminar Evento',
 denyButtonColor: '#dc3545'
 }).then((result) => {
 const eventData = result.value;
 if (result.isConfirmed) {
 // Guardar o editar evento
 $.ajax({
 url: `${RUTA_URL}/paginas/update_event`,
 type: 'POST',
 dataType: 'json',
 data: eventData,
 success: function(response) {
 if (response && response.message) {
 Swal.fire({
 title: 'Éxito!',
 text: response.message,
 icon: 'success',
 confirmButtonText: 'Genial'
 });
 calendar.refetchEvents();
 }
 },
 error: function() {
 Swal.fire({
 title: 'Error',
 text: 'Hubo un problema al guardar el evento.',
 icon: 'error',
 confirmButtonText: 'Cerrar'
 });
 }
 });
 } else if (result.isDenied) {
 // Agregamos un diálogo de confirmación para eliminar
 Swal.fire({
 title: '¿Estás seguro?',
 text: "Esta acción eliminará el evento permanentemente.",
 icon: 'question',
 showCancelButton: true,
 confirmButtonText: 'Sí, eliminar',
 confirmButtonColor: '#dc3545',
 cancelButtonText: 'Cancelar',
 reverseButtons: true
 }).then((confirmResult) => {
 if (confirmResult.isConfirmed) {
 $.ajax({
 url: `${RUTA_URL}/paginas/delete_event`,
 type: 'POST',
 dataType: 'json',
 data: {
 id: info.event.id
 },
 success: function(response) {
 if (response && response
 .message) {
 Swal.fire({
 title: 'Éxito!',
 text: response
 .message,
 icon: 'success',
 confirmButtonText: 'Genial'
 });
 calendar.refetchEvents();
 }
 },
 error: function() {
 Swal.fire({
 title: 'Error',
 text: 'Hubo un problema al eliminar el evento.',
 icon: 'error',
 confirmButtonText: 'Cerrar'
 });
 }
 });
 }
 });
 }
 });
 },
 dateClick: function(info) {
 // Crear nuevo evento con SweetAlert2
 Swal.fire({
 icon: 'info',
 title: 'Agregar Evento',
 confirmButtonText: 'Agregar',
 html: `
 <input type="text" id="title" class="swal2-input" placeholder="Título del Evento" required>
 <label for="start">Fecha de Inicio</label>
 <input type="date" id="start" class="swal2-input" value="${info.dateStr}" required>
 <label for="end">Fecha de Fin</label>
 <input type="date" id="end" class="swal2-input">
 `,
 preConfirm: () => {
 const title = Swal.getPopup().querySelector('#title').value;
 const start = Swal.getPopup().querySelector('#start').value;
 if (!title || !start) {
 Swal.showValidationMessage(
 'Titulo y fecha de inicio son requeridos');
 }
 return {
 title,
 start,
 end: Swal.getPopup().querySelector('#end').value
 };
 }
 }).then((result) => {
 if (result.isConfirmed) {
 const eventData = result.value;
 $.ajax({
 url: `${RUTA_URL}/paginas/add_event`,
 type: 'POST',
 dataType: 'json',
 data: eventData,
 success: function(response) {
 if (response && response.message) {
 Swal.fire({
 title: 'Éxito!',
 text: response.message,
 icon: 'success',
 confirmButtonText: 'Genial'
 });
 calendar
 .refetchEvents(); // Recargar eventos
 }
 },
 error: function() {
 Swal.fire({
 title: 'Error',
 text: 'Hubo un problema al guardar el evento.',
 icon: 'error',
 confirmButtonText: 'Cerrar'
 });
 }
 });
 }
 });
 }
 });

 calendar.render();
 });
</script>


<?php /* stop contenido */ ?>


<?php /* <script src="<?php echo \htmlentities(RUTA_URL??'', ENT_QUOTES, 'UTF-8', false); ?>/public/js/script.js"></script> Carga JS desde archivo local */ ?>


<?php echo $this->runChild('includes.footer'); ?>
